// Generated by "bundle-dts@1.1.3" https://github.com/fishen/bundle-dts#readme."
declare module "mp-modal/src/util" {
    export function isObj(obj: any): obj is object;
}
declare module "mp-modal" {
    interface IModalOptions {
        /**
         * Modal name
         * @default modal
         */
        name?: string;
        /**
         * Whether to automatically close the modal after the callback function is executed
         * @default true
         */
        selfClosing?: boolean;
    }
    export class Modal<T = any> {
        private options;
        constructor(options?: IModalOptions);
        /**
         * Get modal visible status in data used in TSX.
         *
         * @example
         * {
         *      modal=new Modal({ name:"modal" });
         *      render(){
         *          return {this.modal.visible()&&(<View></View>)}
         *      }
         * }
         *
         */
        visible(): any;
        /**
         * Get modal data in data used in TSX.
         *
         * @example
         * {
         *      modal=new Modal({ name:"modal" });
         *      render(){
         *          return <MyComonent props={this.modal.data()}></MyComonent>
         *      }
         * }
         *
         */
        data(): any;
        /**
         * Get modal success callback used in TSX.
         *
         * @example
         * {
         *      modal=new Modal({ name:"modal" });
         *      render(){
         *          return <MyComonent onSuccess={this.modal.success()}></MyComonent>
         *      }
         * }
         *
         */
        success(): any;
        /**
         * Get modal fail callback used in TSX.
         *
         * @example
         * {
         *      modal=new Modal({ name:"modal" });
         *      render(){
         *          return <MyComonent onFail={this.modal.fail()}></MyComonent>
         *      }
         * }
         *
         */
        fail(): any;
        private get;
        private target;
        /**
         * Bind for all modals in thisArg, the modal name will be set to it's property name if it's name is missing.
         * @param thisArg
         * @example
         *
         * Page({
         *      modal1:new Modal({ name:'modal1' });
         *      modal2:new Modal({ name:'modal2' });
         *      onLoad(){
         *          Modal.init(this);
         *      }
         * })
         */
        static init(thisArg: any): void;
        /**
         * Bind this argument with page or component object for current modal.
         *
         * @param thisArg page or component object.
         * @param options modal options.
         * @example
         *
         * const modal=new Modal();
         * modal.bind(this);
         */
        bind(thisArg: any, options?: IModalOptions): this;
        private setData;
        /**
         * Show modal.
         *
         * @param data modal data to set.
         * @param extra extra object data to set.
         * @example
         *
         * <button bind:tap="showModal">show modal</button>
         * <my-modal wx:if="{{modal.visible}}" props="{{modal.data}}" bind:complete="{{modal.success}}" bind:error="{{modal.fail}}"></my-modal>
         *
         * import { Modal } from 'mp-modal';
         *
         * Page({
         *      showModal(){
         *          new Modal({ name:'modal' })
         *              .bind(this)
         *              .show({...props})
         *              .then(()=>console.log('success'))
         *              .catch(()=>console.log('error'))
         *      }
         * })
         *
         */
        show(data?: T, extra?: object): Promise<any>;
        /**
         * Hide modal
         *
         * @example
         *
         * this.modal.hide()
         */
        hide(): void;
    }
    export {};
}